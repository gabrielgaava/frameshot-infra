name: Terraform Plan and Apply

on:
  push:
    branches:
      - main  # Ou a branch que você deseja monitorar

jobs:
  terraform:
    runs-on: ubuntu-latest  # Definindo o ambiente para rodar no Ubuntu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS environment variables
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "AWS environment variables set."

      # Passo 3: Instalar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.5  # Defina a versão do Terraform que você deseja usar

      # Passo 4: Inicializar o Terraform
      - name: Terraform Init
        run: terraform init

      # Passo 5: Rodar Terraform Plan
      - name: Terraform Plan
        run: terraform plan 
        -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
        -var="aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
        -var="aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" \
        -var="aws_region=${{ secrets.AWS_REGION }}" \
        -var="db_master_username=${{ secrets.DB_MASTER_USERNAME }}" \
        -var="db_master_password=${{ secrets.DB_MASTER_PASSWORD }}" \
        -var="db_name=${{ secrets.DB_NAME }}"


      # Passo 6: Rodar Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve 
        -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
        -var="aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
        -var="aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" \
        -var="aws_region=${{ secrets.AWS_REGION }}" \
        -var="db_master_username=${{ secrets.DB_MASTER_USERNAME }}" \
        -var="db_master_password=${{ secrets.DB_MASTER_PASSWORD }}" \
        -var="db_name=${{ secrets.DB_NAME }}"

